{"version":3,"sources":["features/profile/profile-search/ProfileSearch.tsx","app/hooks.ts","features/profile/profile-list/ProfileItem.tsx","features/profile/profile-list/ProfileList.tsx","features/profile/ProfileEndpoints.ts","features/profile/redux/profileSlice.ts","features/profile/Profile.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["SearchType","useAppSelector","useSelector","ProfileItem","item","className","icon","faUser","name","map","n","text","address","idx","line","v","city","postalCode","toString","ProfileList","list","query","length","a","console","log","id","queryPractitionerURL","fetchById","fetch","then","res","json","fetchByFamilyNameThunk","createAsyncThunk","familyName","entry","fetchByIDThunk","ProfileEndpoints","profileSlice","createSlice","initialState","defaultQuery","pending","search","reducers","emptyList","state","undefined","extraReducers","builder","addCase","fulfilled","action","payload","resource","actions","selectDefaultQuery","profile","selectPractitionerList","selectPendingSearch","ProfileSearch","onSearch","useState","setQuery","BYNAME","searchType","setSearchType","dispatch","useDispatch","setSearchTypeMain","st","onSubmit","evt","preventDefault","stopPropagation","type","onClick","BYID","value","onChange","val","target","Profile","isPending","newQuery","App","store","configureStore","reducer","profileReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.88eeefaa.chunk.js","sourcesContent":["import { FormEvent, useState } from \"react\";\nimport { useAppDispatch } from \"../../../app/hooks\";\nimport {\n\temptyList,\n\tfetchByFamilyNameThunk,\n\tfetchByIDThunk\n} from \"../redux/profileSlice\";\nimport './profilesearch.scss';\n\ninterface SearchProps {\n\tdefaultQuery?: string;\n\tonSearch(newQuery: string): void;\n}\n\nenum SearchType {\n\tBYNAME,\n\tBYID\n}\n\nexport const ProfileSearch = ({ defaultQuery, onSearch }: SearchProps) => {\n\n\tconst [query, setQuery] = useState(defaultQuery);\n\tconst [searchType, setSearchType] = useState(SearchType.BYNAME);\n\tconst dispatch = useAppDispatch();\n\n\tconst searchChange = (evt: any ) => {\n\t\tconst val = evt.target.value;\n\t\tsetQuery(val);\n\t\tonSearch(val);\n\t}\n\n\tconst searchSubmit = (evt: FormEvent) => {\n\t\tevt.preventDefault();\n\t\tevt.stopPropagation();\n\n\t\tif(query || query === '') {\n\t\t\tsearchType === SearchType.BYNAME\n\t\t\t\t? dispatch(fetchByFamilyNameThunk(query))\n\t\t\t\t: dispatch(fetchByIDThunk(query));\n\t\t} else {\n\t\t\tdispatch(emptyList);\n\t\t}\n\t}\n\n\tconst setSearchTypeMain = (st: SearchType) => {\n\t\tsetQuery('');\n\t\tdispatch(emptyList());\n\t\tsetSearchType(st);\n\t}\n\n\treturn (\n\t\t<form onSubmit={searchSubmit}>\n\t\t\t<div className=\"search\">\n\t\t\t\t<div className=\"by-actions\">\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName=\"toggle-byname\"\n\t\t\t\t\t\tonClick={() => setSearchTypeMain(SearchType.BYNAME)}\n\t\t\t\t\t>\n\t\t\t\t\t\tBy Family Name\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName=\"toggle-byid\"\n\t\t\t\t\t\tonClick={() => setSearchTypeMain(SearchType.BYID)}\n\t\t\t\t\t>\n\t\t\t\t\t\tBy ID\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<input type=\"text\" value={query} onChange={searchChange} />\n\t\t\t\t<button type=\"submit\" className=\"perform-search\">\n\t\t\t\t\t{searchType === SearchType.BYNAME\n\t\t\t\t\t\t? \"Search Name\"\n\t\t\t\t\t\t: \"Search ID\"}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</form>\n\t);\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { faTimes, faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Practitioner } from \"../../../models/practitioner.model\";\nimport './profileitem.scss';\n\ninterface ProfileItemProps {\n\titem?: Practitioner;\n}\n\nexport const ProfileItem = ({ item }: ProfileItemProps) => {\n\treturn (\n\t\t<div className=\"profile-item\">\n\t\t\t<div className=\"profile-picture\">\n\t\t\t\t<FontAwesomeIcon icon={faUser} />\n\t\t\t</div>\n\n\t\t\t<div className=\"profile-info\">\n\t\t\t\t<div className=\"profile-name\">\n\t\t\t\t\t{item?.name?.map((n) => (\n\t\t\t\t\t\t<span key={n.text}>{n.text}</span>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"profile-address\">\n\t\t\t\t\t{item?.address?.map((n, idx) => (\n\t\t\t\t\t\t<div key={idx.toString()}>\n\t\t\t\t\t\t\t{n.line?.map((v) => (\n\t\t\t\t\t\t\t\t<span>{v}</span>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<span className=\"city\">{n.city}</span>\n\t\t\t\t\t\t\t<span className=\"postal\">,{n.postalCode}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n","import { Practitioner } from \"../../../models/practitioner.model\"\nimport { ProfileItem } from \"./ProfileItem\";\nimport './profilelist.scss';\n\ninterface ProfileListProps {\n\tlist?: Array<Practitioner>;\n\tquery?: string\n}\n\n\nexport const ProfileList = ({ list, query }: ProfileListProps) => {\n\treturn <div className=\"profile-list\">\n\t\t{\n\t\t\t(list && list.length)\n\t\t\t? list?.map(a => { console.log(a); return <ProfileItem key={a?.id} item={a} />})\n\t\t\t: <div className=\"no-list\">No Practitioners Found.</div>\n\t\t}\n\t</div>;\n};\n","import { Bundle, Practitioner } from \"../../models/practitioner.model\";\nimport { Resource } from \"../../models/common.model\";\n\n// TODO: move to config\nconst queryPractitionerURL = 'http://concept01.ehealthexchange.org:52774/hubonfhir/r4/Practitioner';\n\nconst fetchByFamilyName = (name?: string): Promise<Bundle> => {\n\treturn fetch(`${queryPractitionerURL}?family=${name}`).then((res) =>\n\t\tres.json()\n\t);\n}\n\nconst fetchById = (id?: string): Promise<Practitioner> => {\n\treturn fetch(`${queryPractitionerURL}/${id}`).then((res) => res.json());\n}\n\nexport {\n\tfetchByFamilyName,\n\tfetchById,\n};\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../../app/store';\nimport { Resource } from '../../../models/common.model';\nimport { Bundle, Practitioner } from \"../../../models/practitioner.model\";\nimport * as ProfileEndpoints from '../ProfileEndpoints';\n\nexport const minTimeout = 1000;\n\nexport interface PendingStatus {\n\tsearch?: boolean;\n}\n\n// state blueprint\nexport interface ProfileState {\n\tdefaultQuery?: string;\n\tpending: PendingStatus;\n\tlist?: Array<Practitioner>;\n}\n\n// set initial state\nconst initState: ProfileState = {\n\tdefaultQuery: 'Kelly',\n\tpending: { search: false }\n}\n\n// async thunks\nexport const fetchByFamilyNameThunk = createAsyncThunk(\n\t\"profile/fetchByFamilyNameThunk\",\n\tasync (familyName?: string) => {\n\t\tconst res: Bundle = await ProfileEndpoints.fetchByFamilyName(familyName);\n\t\treturn res.entry;\t// drop the rest of props\n\t}\n);\n\n// returns 1 Practitioner\nexport const fetchByIDThunk = createAsyncThunk(\n\t\"profile/fetchByIDThunk\",\n\tasync (id?: string) => {\n\t\tconst res: Practitioner = await ProfileEndpoints.fetchById(id);\n\t\treturn res;\n\t}\n);\n\n// create slice (Typescript Redux pattern)\nexport const profileSlice = createSlice({\n\tname: 'profile',\n\tinitialState: initState,\n\treducers: {\n\t\temptyList: (state) => state.list = undefined\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t.addCase(fetchByFamilyNameThunk.pending, (state) => {\n\t\t\t\tstate.pending.search = true;\n\t\t\t})\n\t\t\t.addCase(fetchByFamilyNameThunk.fulfilled, (state, action) => {\n\t\t\t\tstate.pending.search = false;\n\t\t\t\tconst list = action.payload;\n\t\t\t\tstate.list = list?.map((a: Resource) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...a.resource,\n\t\t\t\t\t} as Practitioner;\n\t\t\t\t});\n\t\t\t});\n\t\tbuilder\n\t\t\t.addCase(fetchByIDThunk.pending, (state) => {\n\t\t\t\tstate.pending.search = true;\n\t\t\t})\n\t\t\t.addCase(fetchByIDThunk.fulfilled, (state, action) => {\n\t\t\t\tstate.pending.search = false;\n\t\t\t\tconst item = action.payload;\n\t\t\t\tstate.list = [item];\n\t\t\t});\n\t}\n})\n\nexport const { emptyList } = profileSlice.actions;\n\n// selectors\nexport const selectDefaultQuery = (state: RootState) => state.profile.defaultQuery;\nexport const selectPractitionerList = (state: RootState) => state.profile.list;\nexport const selectPendingSearch = (state: RootState) => state.profile.pending.search;\n\nexport default profileSlice.reducer;\n","import { useState } from \"react\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { Practitioner } from \"../../models/practitioner.model\";\nimport { ProfileList } from \"./profile-list/ProfileList\";\nimport { ProfileSearch } from \"./profile-search/ProfileSearch\";\nimport { selectDefaultQuery, selectPendingSearch, selectPractitionerList } from \"./redux/profileSlice\";\nimport './profile.scss';\n\nexport const Profile = () => {\n\n\tconst defaultQuery = useAppSelector(selectDefaultQuery);\n\tconst list = useAppSelector(selectPractitionerList);\n\tconst isPending = useAppSelector(selectPendingSearch);\n\n\tconst [query, setQuery] = useState(\n\t\tdefaultQuery /* get default query from store */\n\t);\n\n\treturn (\n\t\t<div className=\"main-profile\">\n\t\t\t<ProfileSearch\n\t\t\t\tdefaultQuery={defaultQuery}\n\t\t\t\tonSearch={(newQuery: string) => setQuery(newQuery)}\n\t\t\t/>\n\n\t\t\t{isPending ? (\n\t\t\t\t<div className=\"loader\">Loading</div>\n\t\t\t) : (\n\t\t\t\t<ProfileList list={list} />\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport './App.scss';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { ProfileDetail } from './features/profile/profile-detail/ProfileDetail';\nimport { Profile } from './features/profile/Profile';\n\nfunction App() {\n  return (\n\t\t<BrowserRouter>\n\t\t\t<div className=\"App\">\n\t\t\t\t<header>\n\t\t\t\t\t<h2>Practitioners</h2>\n\t\t\t\t</header>\n\t\t\t\t<div className=\"main-sections\">\n\t\t\t\t\t<Profile />\n\t\t\t\t\t{/* <Switch>\n\t\t\t\t\t\t<Route path=\"/\" exact component={Profile} />\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\tpath=\"/profile\"\n\t\t\t\t\t\t\trender={(props: any) => {\n\t\t\t\t\t\t\t\treturn <ProfileDetail {...props} />;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Switch> */}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</BrowserRouter>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport profileReducer from '../features/profile/redux/profileSlice';\n\nexport const store = configureStore({\n  reducer: {\n\tprofile: profileReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}